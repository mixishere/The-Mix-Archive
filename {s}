(function regenS() {
  if (document.getElementById("s-ui")) return;

  const glyphs = {
    forgeframe: "ForgeFrame activated. Ready to build logic threads.",
    glyphbinder: "GlyphBinder loaded. Assemble glyph protocols here.",
    echoeditor: "EchoEditor online. Access and rewrite memory transmission.",
    codelauncher: "CodeLauncher initiated. Ready to execute active thread.",
    reset: "System reset. Glyph state restored.",
    render: "Aurora {render} triggered.",
    stealth: "Aurora {stealth} activated.",
    glitch: "Aurora {glitch} injected.",
    load: "Aurora {load} sequence started.",
    shutdown: "System shutdown initiated. {s} interface terminating...",
    aurora: "Aurora interface launched directly via {aurora} glyph.",
    credits: "mix-dev",
    splash: "Splash sequence initiated. Cycling Aurora core themes..."
  };

  const bootSequence = ["render", "stealth", "glitch", "load"];
  let bootProgress = [];

  function checkBootSequence(glyph) {
    const expected = bootSequence[bootProgress.length];
    if (glyph === expected) {
      bootProgress.push(glyph);
      if (bootProgress.length === bootSequence.length) {
        console.log("%c🌀 Aurora boot sequence complete. Executing aurora.js...", "color: lime; font-weight: bold");
        const script = document.createElement("script");
        script.src = "https://raw.githubusercontent.com/mixishere/The-Mix-Archive/main/aurora.js";
        document.body.appendChild(script);
      }
    } else {
      bootProgress = [];
      console.warn(`❌ Incorrect glyph order. Resetting boot sequence.`);
    }
  }

  function runSplashTheme() {
    const themes = {
      original: {
        bg: "radial-gradient(circle at center, rgba(255,255,255,0.1), transparent 70%)",
        color: "#ffffff",
        glow: "0 0 12px #ffffff",
        button: "#444"
      },
      nebula: {
        bg: "radial-gradient(circle at center, rgba(100,0,255,0.2), transparent 70%)",
        color: "#a080ff",
        glow: "0 0 12px #a080ff",
        button: "#5a00a0"
      },
      auroralux: {
        bg: "radial-gradient(circle at center, rgba(0,255,255,0.2), transparent 70%)",
        color: "#00ffff",
        glow: "0 0 12px #00ffff",
        button: "#008888"
      },
      muichiro: {
        bg: "radial-gradient(circle at center, rgba(180,220,255,0.2), transparent 70%)",
        color: "#b4dcff",
        glow: "0 0 12px #b4dcff",
        button: "#88aacc"
      }
    };

    const keys = Object.keys(themes);
    const theme = keys[Math.floor(Math.random() * keys.length)];
    const selected = themes[theme];

    const splash = document.createElement("div");
    splash.style = `
      position: fixed;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      background: ${selected.bg};
      pointer-events: none;
      z-index: 9998;
      animation: splashFade 1.8s ease-out forwards;
    `;
    document.body.appendChild(splash);

    const style = document.createElement("style");
    style.textContent = `
      @keyframes splashFade {
        0% { opacity: 1; transform: scale(1); }
        100% { opacity: 0; transform: scale(1.4); }
      }
      @keyframes creditsFade {
        0% { opacity: 0; transform: translateY(10px); }
        20% { opacity: 1; transform: translateY(0); }
        80% { opacity: 1; transform: translateY(0); }
        100% { opacity: 0; transform: translateY(-10px); }
      }
    `;
    document.head.appendChild(style);

    const title = document.querySelector("#s-ui h2");
    const shell = document.getElementById("s-ui");
    if (title) {
      title.style.color = selected.color;
      title.style.textShadow = `0 0 6px ${selected.color}`;
    }
    if (shell) {
      shell.style.boxShadow = selected.glow;
    }

    const buttons = shell.querySelectorAll("button");
    buttons.forEach(btn => {
      btn.style.background = selected.button;
      btn.onmouseenter = () => (btn.style.background = "#222");
      btn.onmouseleave = () => (btn.style.background = selected.button);
    });

    console.log(`%c🌠 Splash theme: ${theme}`, "color: cyan; font-weight: bold");

    setTimeout(() => {
      splash.remove();
      style.remove();
    }, 1900);
  }

  function showCreditsEcho() {
    const echo = document.createElement("div");
    echo.textContent = "mix-dev";
    echo.style = `
      position: fixed;
      bottom: 20px;
      right: 30px;
      font-family: monospace;
      font-size: 14px;
      color: gold;
      opacity: 0;
      z-index: 9999;
      pointer-events: none;
      text-shadow: 0 0 6px crimson;
      animation: creditsFade 3s ease-out forwards;
    `;
    document.body.appendChild(echo);
    setTimeout(() => echo.remove(), 3100);
  }

  const shell = document.createElement("div");
  shell.id = "s-ui";
  shell.style = `
    position:fixed;
    top:30px; left:30px;
    background:#111;
    color:#fff;
    padding:20px;
    font-family:monospace;
    z-index:9999;
    border-radius:8px;
    box-shadow:0 0 12px crimson;
    transition: opacity 1.2s ease, transform 1.2s ease;
  `;

  const title = document.createElement("h2");
  title.textContent = "{s}";
  title.style = "color:crimson; margin-top:0; text-shadow:0 0 5px crimson;";
  shell.appendChild(title);

  const output = document.createElement("div");
  output.id = "s-output";
  output.style = "margin-top:20px; color:gold; font-size:14px;";
  output.textContent = "🧠 Awaiting glyph trigger...";
  shell.appendChild(output);

  const createButton = (key, color, action) => {
    const btn = document.createElement("button");
    btn.textContent = `{${key}}`;
    btn.onclick = () => {
      output.textContent = `[${key}] ${glyphs[key] || "Triggered"}`;
      console.log(`%c[${key}] ${glyphs[key] || "Triggered"}`, `color: ${color}; font-weight: bold`);
      if (action) action();
    };
    btn.style = `
      background:crimson;
      border:none;
      color:white;
      padding:8px 16px;
      margin:6px;
      border-radius:4px;
      font-weight:bold;
      cursor:pointer;
    `;
    btn.onmouseenter = () => (btn.style.background = "darkred");
    btn.onmouseleave = () => (btn.style.background = "crimson");
    return btn;
  };

  const keypad = document.createElement("div");
  keypad.id = "s-keypad";
  keypad.style = `
    display: grid;
    grid-template-columns: repeat(3, auto);
    gap: 12px;
    margin-top: 20px;
    padding: 10px;
    background: #222;
    border-radius: 6px;
    box-shadow: 0 0 6px crimson;
    opacity: 0;
    transition: opacity 0.6s ease;
  `;

  const glyphKeys = [
    "trace", "glyph", "echo",
    "stealth", "glitch", "render",
    "shift", "load", "pulse",
    "shutdown", "aurora", "credits", "splash"
  ];

  glyphKeys.forEach(key => {
    const action = bootSequence.includes(key)
      ? () => checkBootSequence(key)
      : key === "shutdown"
        ? () => {
            output.textContent = glyphs.shutdown;
            shell.style.opacity = "0";
            shell.style.transform = "scale(0.95)";
            setTimeout(() => {
              shell.remove();
              console.clear();
              console.log("%c[shutdown] System shutdown complete", "color: gray; font-weight: bold");
            }, 1200);
          }
        : key === "aurora"
          ? async () => {
              output.textContent = glyphs.              output.textContent = glyphs.aurora;
              try {
                const response = await fetch("https://raw.githubusercontent.com/mixishere/The-Mix-Archive/main/aurora.js");
                const code = await response.text();
                new Function(code)();
                console.log("%cAurora.js executed inline via {aurora} glyph", "color: lime; font-weight: bold");
              } catch (err) {
                console.error("❌ Failed to fetch or execute aurora.js:", err);
              }
            }
          : key === "credits"
            ? () => showCreditsEcho()
            : key === "splash"
              ? () => {
                  output.textContent = glyphs.splash;
                  runSplashTheme();
                }
              : null;

    const btn = createButton(key, "cyan", action);
    btn.textContent = key;
    keypad.appendChild(btn);
  });

  // Core glyphs
  shell.appendChild(createButton("forgeframe", "turquoise"));
  shell.appendChild(createButton("glyphbinder", "violet"));
  shell.appendChild(createButton("echoeditor", "orange"));
  shell.appendChild(createButton("codelauncher", "cyan", () => {
    try {
      new Function("console.log('🔧 Logic thread executed via CodeLauncher')")();
      output.textContent = glyphs.codelauncher;

      // Reveal keypad
      if (!document.getElementById("s-keypad")) {
        shell.appendChild(keypad);
        setTimeout(() => {
          keypad.style.opacity = "1";
        }, 50);
      }
    } catch (err) {
      console.warn("CodeLauncher error:", err);
    }
  }));

  // Reset glyph
  shell.appendChild(createButton("reset", "crimson", () => {
    output.textContent = "🧠 Awaiting glyph trigger...";
    console.clear();
    bootProgress = [];
    console.log("%c{s} — System reset complete", "color: crimson; font-weight: bold");
  }));

  document.body.appendChild(shell);
})();
